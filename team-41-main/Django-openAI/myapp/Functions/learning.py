import os
import openai
import yaml
from openai import AzureOpenAI

api_key = os.getenv("AZURE_OPENAI_API_KEY")

client = AzureOpenAI(
    api_key = api_key,
    api_version =  "2023-07-01-preview",
    azure_endpoint = "https://ai-proxy.lab.epam.com"
)

deployment_name = 'gpt-4'

# To get the current working directory path
file_path = os.getcwd()

def extract_values(data):
        values = []
        if isinstance(data, dict):
            for key, value in data.items():
                values.extend(extract_values(value))
        elif isinstance(data, list):
            for item in data:
                values.extend(extract_values(item))
        else:
            values.append(data)
        return values

def learningSkill(skill):
    print(file_path)

    # Enter Skill
    # Ask user for the path to save the generated code
    save_path = f'{file_path}/{skill}.yaml'

    # Please only use this one if you absolutely need it. It's slower and more expensive.
    # deployment_name = "gpt-4"
    # deployment_name = "gpt-4-32k"

    # For embeddings only, but small private models may perform better and cheaper
    # https://huggingface.co/spaces/mteb/leaderboard
    # deployment_name = "text-embedding-ada-002"
    response = client.chat.completions.create(
        model=deployment_name,
        temperature=0,
        messages=[
            {
            "role": "user",
            "content": f"Given the technology name {skill}, provide a tree of prerequisite skills one should have before starting to learn the technology, as well as the skills specific to the technology itself. The tree should be in Yaml format and should include different levels of skills, starting from the most fundamental ones to the more advanced ones that directly relate to the given technology.",
            },
        ],
    )
    # Write the response to a file
    with open(save_path, "w", encoding="utf-8") as file:
        file.write(response.choices[0].message.content)


    print(f"The skills generated by AI are stored to path: {save_path}")


    # Intermediate steps for cleaning the generated Yaml file
    # Open the original YAML file for reading
    with open(save_path, 'r') as original_file:
        # Read all lines from the file
        lines = original_file.readlines()

    # Check if the first line contains '```yaml'
    if lines[0].strip() == '```yaml':
        # If it does, skip the first line
        lines = lines[1:]

    # Remove trailing occurrences of "```"
    while lines[-1].strip() == "```":
        lines.pop()

    save_path_cleaned = f'{file_path}/{skill}_cleaned.yaml'
    # Write the modified content to a new file
    with open(save_path_cleaned, 'w') as cleaned_file:
        cleaned_file.writelines(lines)

    # Reading the topics from Yaml file
    

    # Load the YAML file
    with open(save_path_cleaned, 'r') as file:
        yaml_data = yaml.safe_load(file)
    
    #extract content
    def collect_titles_with_elements(data):
        transformed_data = {}
        for category, subcategories in data.items():
            transformed_data[category] = {}
            for subcategory, skills in subcategories.items():
                transformed_data[category][subcategory] = skills
        return transformed_data
    collected_data = collect_titles_with_elements(yaml_data[next(iter(yaml_data))]) 

    return collected_data

def learningKnowledge(all_values):
# Prompt2 will take each topic and generate Learning content.
    for value in all_values:
        prompt2_response = client.chat.completions.create(
        model=deployment_name,
        temperature=0,
        messages=[
            {
            "role": "user",
            "content": f"Generate a fun, easy-to-understand point-based learning material on {value}. This should include key aspects, basic components, and fundamental principles. Following the learning material, develop some engaging questions with multiple choice and provide the correct answers at the end to assess the user's comprehension and mastery of it.",
            },
        ],
    )
        save_learning_content = f'{file_path}/{value}.txt'
        # Save the Learning content in separate text files for each topic.
        with open(save_learning_content, "w", encoding="utf-8") as file:
            file.write(prompt2_response.choices[0].message.content)
            print(f"The skills generated by AI are stored to path: {save_learning_content}")
    return save_learning_content

